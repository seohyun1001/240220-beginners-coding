DESC 테이블이름 : 테이블의 구성을 파악하는 SQL문
	desc salgrade;



SELECT : 데이터베이스에 보관되어 있는 데이터를 조회할 때 사용하는 SQL문



* : 모든 열
	SELECT * FROM emp;
	SELECT EMPNO, ENAME, DEPTNO FROM EMP;



DISTINCT : 열의 중복을 제거하는 속성
	SELECT DISTINCT DEPTNO FROM EMP;



열을 2열 이상 지정하게 되면 A열 x B열을 기준으로 중복 제거
	SELECT DISTINCT JOB, DEPTNO FROM EMP;
	SELECT DISTINCT EMPNO FROM EMP;
	SELECT ALL JOB, DEPTNO FROM EMP;
	SELECT JOB, DEPTNO FROM EMP;



열 이름에 연산자 및 별칭 정하기
""를 쓰면 소문자로, 쓰지 않으면 대문자로 나옴
""는 보통 다른 언어에서 문자어를 뜻함 -> 잘 안 씀
as는 붙이는 것이 좋다
	select ename, sal, sal*12+comm year, comm from emp;
	select ename, sal, sal*12+comm "year", comm from emp;
	select ename, sal, sal*12+comm as year, comm from emp;
	select ename, sal, sal*12+comm as "year", comm from emp;



ORDER BY : SELECT문으로 데이터 조회시 오름차순/내림차순 정렬을 하는 SQL문
acs : 오름차순 정렬(생략 가능)
	SELECT * FROM EMP ORDER BY DEPTNO asc;
	
desc : 내림차순 정렬
	SELECT * FROM EMP ORDER BY DEPTNO desc;
	
정렬 여러 번 -> order by 정렬1, 정렬2, ... ;
	SELECT * FROM EMP ORDER BY DEPTNO, sal desc, empno asc;



연습 문제
2. 오른쪽과 같은 결과가 나오도록 EMP 테이블의 JOB 열 데이터를 중복 없이 출력해 보세요.
	select distinct JOB from emp;



3. 다음의 모든 조건을 만족하는 SQL문을 작성해 보세요.
조건 1) 조회할 테이블은 EMP 테이블이며 모든 열을 출력합니다.
조건 2) 출력되는 열의 별칭은 다음과 같습니다.
EMPNO 열  -> EMPLOYEE_NO 
ENAME 열  -> EMPLOYEE_NAME 
MGR 열    -> MANAGER 
SAL 열     -> SALARY 
COMM 열  -> COMMISSION 
DEPTNO 열 -> DEPARTMENT_NO
조건 3) 부서 번호를 기준으로 내림차순으로 정렬하되,
부서 번호가 같다면 사원 이름을 기준으로 오름차순 정렬합니다.
select empno as EMPLOYEE_NO, ENAME as EMPLOYEE_NAME, job, MGR as MANAGER,
hiredate, SAL as SALARY, comm as COMMISSION, deptno as DEPARTMENT_NO from emp
order by deptno desc, ename asc;





WHERE절 : SELECT문에서 조건에 맞는 특정 행을 출력하는 SQL문(SELECT문 필요)
WHERE절 X
	SELECT * FROM emp;
WHERE절 O
	SELECT * FROM emp WHERE deptno = 30;
	SELECT * FROM emp WHERE deptno = 20;
	SELECT * FROM emp WHERE deptno = 10;



AND : (그리고) 양쪽 항의 결과가 모두 true(참)일 때 true를 반환하고,
       나머지는 모두 false(거짓)
	SELECT * FROM emp WHERE deptno = 30 AND job = 'SALESMAN';
deptno가 30이고, job이 'SALESMAN'인 데이터를 출력


OR : (또는) 양쪽 항 중에 하나라도 결과가 true(참)이면 true를 반환하고,
      양쪽 항이 모두 false이면 false를 반환
	SELECT * FROM emp WHERE deptno = 30 OR job = 'CLERK';
	SELECT * FROM emp WHERE deptno = 20 AND job = 'CLERK';
	SELECT * FROM emp WHERE deptno = 10 OR job = 'MANAGER';



대소 비교 연산자 : <, <=, >, >=
	SELECT * FROM emp WHERE sal > 1000;
	SELECT * FROM emp WHERE sal >= 2000;
	SELECT * FROM emp WHERE sal < 1600;
	SELECT * FROM emp WHERE sal <= 1600;
문자열의 경우 첫 글자부터 한 글자씩 비교를 함
	SELECT * FROM emp WHERE ename < 'B';
	SELECT * FROM emp WHERE ename <= 'FORC';



등가 비교 연산자 : = / !=, <>, ^=
	SELECT * FROM emp WHERE sal = 3000;
	SELECT * FROM emp WHERE sal != 3000;
	SELECT * FROM emp WHERE sal <> 3000;
	SELECT * FROM emp WHERE sal ^= 3000;
사원 정보 테이블에서 급여를 2000이상 받으면서 직책이 매니저가 아닌 사람
	SELECT * FROM emp
		WHERE sal >= 2000
		AND job != 'MANAGER';
    
	
	
NOT 연산자 : (다르다) / !=, <>, ^=
	SELECT * FROM emp
		WHERE NOT(sal = 3000 and sal = 1600);
	SELECT * FROM emp
		WHERE NOT (sal = 3000 or sal = 1600);
	SELECT * FROM emp
		WHERE NOT(sal = 3000 and sal = 1600);
	SELECT * FROM emp
		WHERE sal != 3000;



IN 연산자 : 조건이 여러 개일 때 사용하는 연산자
= 필요 없음
	SELECT * FROM emp
		WHERE job IN ('MANAGER', 'PRESIDENT');
    
	SELECT * FROM emp
		WHERE job IN ('MANAGER', 'PRESIDENT');
    
	SELECT * FROM emp
		WHERE job != 'MANAGER'
			AND job <> 'PRESIDENT'
			AND job ^= 'CLERK';
        
IN 연산자를 활용하여 부서번호가 10, 20번인 사원 정보 출력
	SELECT * FROM emp
		WHERE deptno
			IN(10, 20);



BETWEEN A AND B : A보다 크거나 같고, B보다 작거나 같을 때 출력하는 연산자
	SELECT * FROM emp
		WHERE sal BETWEEN 2000 AND 3000;

대소 비교 연산자를 이용하여 급여가 2000보다 크거나 같고 3000보다 작거나 같은 사원을 출력
	SELECT * FROM emp
		WHERE sal >= 2000
		AND sal <= 3000;

	NOT BETWEEN A AND B
	SELECT * FROM emp
		WHERE sal
		NOT BETWEEN 2000 AND 3000;
	SELECT * FROM emp
		WHERE sal < 2000 or sal > 3000;
    
    

LIKE 연산자 : 비슷한 문자열을 찾는 연산자, 와일드 카드 문자를 사용해야 함
와일드 카드 문자 : '_'(어떤 문자든 상관없이 한 글자)
                 '%'(어떤 문자든 상관없이 여러 문자)
첫번째 글자가 S로 시작하는 사원의 이름
	SELECT * FROM emp
		WHERE ename
		LIKE 'S%';
    
두번째 글자가 L인 사원의 이름
	SELECT * FROM emp
		WHERE ename 
		LIKE '_L%';
    
세번째 글자가 L인 사원의 이름
	SELECT * FROM emp
		WHERE ename
		LIKE '__L%';

세번째 문자가 L이 아닌 사원의 이름
	SELECT * FROM emp
		WHERE ename
		NOT LIKE '__L%';
    


IS NULL 연산자 : NULL인지 아닌지 확인하는 연산자
데이터가 NULL일 경우 출력
	SELECT * FROM emp
		WHERE mgr IS NULL;
	SELECT * FROM emp
		WHERE comm IS NULL;
		
꼭 IS NULL의 형태로 사용해야 함
	SELECT * FROM emp
		WHERE comm = NULL;
NOT을 쓸 때는 IS NOT NULL의 형태로 사용
	SELECT * FROM emp
		WHERE comm IS NOT NULL;



UNION 연산자 : 중복을 제거하는 합집합
순서는 위에 적은 문장 -> 아래에 적은 문장
	SELECT * FROM emp
		WHERE deptno = 20
		UNION
			SELECT * FROM emp
				WHERE deptno = 30;

	SELECT * FROM emp
		WHERE deptno IN (20,30)
			ORDER BY deptno;
			
UNION의 제약 사항
1. 출력 열의 개수가 같아야 한다.
2. 출력 열의 자료형이 같아야 한다.
1.
SELECT empno, ename, sal, deptno FROM emp
    WHERE deptno = 20
    UNION
        SELECT empno, ename, sal FROM emp
            WHERE deptno =30;
2. 
SELECT empno, ename, sal, deptno FROM emp
    WHERE deptno = 20
    UNION
        SELECT ename, empno, sal, deptno FROM emp
            WHERE deptno =30;

SELECT empno, ename, sal, deptno FROM emp
    WHERE deptno = 20
    UNION
        SELECT sal, job, empno, deptno FROM emp
            WHERE deptno =30;

SELECT empno, ename, job. FROM emp
    WHERE deptno = 10
    UNION
        SELECT deptno, dname, loc FROM dept;
  

  
UNION ALL : 중복을 허용하는 합집합
	SELECT * FROM emp
		WHERE deptno = 10
		UNION ALL
			SELECT * FROM emp
				WHERE deptno = 10;
				
	SELECT * FROM emp
		WHERE deptno = 10
		UNION
			SELECT * FROM emp
				WHERE deptno = 10;
            
			
			
MINUS : 차집합
정렬의 경우 select 다음에 그 열이름이 있어야 함
	SELECT * FROM emp
		MINUS
			SELECT * FROM emp
				WHERE deptno = 10;
				
	SELECT * FROM emp
		WHERE deptno != 10;
    
	
	
INTERSECT : 교집합
	SELECT * FROM emp
		INTERSECT
			SELECT * FROM emp
				WHERE deptno = 10;



연산자의 우선 순위
0. ()
1. *, /
2. +, -
3. 비교 연산자 >, >=, <, <=, =, !=, <>, ^=
4. IS NULL, LIKE , IN
5. BETWEEN A AND B
6. NOT
7. AND
8. OR



5장 연습문제
1.
SELECT * FROM emp
    WHERE ename LIKE '%S';

2. 
SELECT empno, ename, job, sal, deptno FROM emp
    WHERE deptno = 30
        AND job = 'SALESMAN';
    
3.
SELECT empno, ename, sal, deptno FROM emp
    WHERE deptno IN(20, 30)
        AND sal > 2000;

4.
SELECT * FROM emp
    WHERE NOT (sal >= 2000 AND sal <= 3000);

5.
SELECT ename, empno, sal, deptno FROM emp
    WHERE deptno = 30
        AND NOT sal BETWEEN 1000 AND 2000;

6.
SELECT * FROM emp
    WHERE comm IS NULL
        AND job IN ('MANAGER', 'CLERK')
            AND NOT ename LIKE '_L%';
			


추가 연습문제	
1. 문제) 부서번호가 10번인 부서의 사람 중 사원번호, 이름, 월급을 출력하라
SELECT empno, ename, sal FROM emp
    WHERE deptno = 10;
    
2. 문제) 사원번호가 7369인 사람 중 이름, 입사일, 부서번호를 출력하라.
SELECT ename, hiredate, deptno FROM emp
    WHERE empno = 7369;
    
3. 문제) 이름이 ALLEN인 사람의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE ename = 'ALLEN';

4. 문제) 입사일이 81/02/20인 사원의 이름, 부서번호, 월급을 출력하라.
SELECT ename, deptno, sal FROM emp
    WHERE hiredate = '81/02/20';
    

5. 문제) 직업이 MANAGER가 아닌 사람의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE job != 'MANAGER';

6. 문제) 입사일이 81/04/02 이후에 입사한 사원의 정보를 출력하라.
SELECT * FROM emp
    WHERE hiredate > '81/04/02';
    
7. 문제) 급여가 $800 이상인 사람의 이름, 급여, 부서번호를 출력하라.
SELECT ename, sal, deptno FROM emp
    WHERE sal >= 800;

8. 문제) 부서번호가 20번 이상인 사원의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE deptno >= 20;

9. 문제) 이름이 K로 시작하는 사람보다 높은 이름을 가진 사람의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE ename > 'K';
    
10. 문제) 입사일이 81/12/09 보다 먼저 입사한 사람들의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE hiredate < '81/12/09';
    
11. 문제) 입사번호가 7698보다 작거나 같은 사람들의 입사번호와 이름을 출력하라.
SELECT empno, ename FROM emp
    WHERE empno <= 7698;
    
12. 문제) 입사일이 81/04/02 보다 늦고 82/12/09 보다 빠른 사원의 이름,월급, 부서번호를 출력하라.
SELECT ename, sal, deptno FROM emp
    WHERE hiredate BETWEEN '81/04/02' AND '82/12/09';

13. 문제) 급여가 $1,600보다 크고 $3,000보다 작은 사람의 이름, 직업, 급여를 출력하라.
SELECT ename, job, sal FROM emp
    WHERE sal BETWEEN 1600 AND 3000;

14. 문제) 사원번호가 7654와 7782 사이 이외의 사원의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE empno NOT BETWEEN 7654 AND 7782;
    
15. 문제) 이름이 B와 J 사이의 모든 사원의 정보를 출력하라.
SELECT * FROM emp
    WHERE ename BETWEEN 'B' AND 'J';

16. 문제) 입사일이 81년 이외에 입사한 사람의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE hiredate NOT LIKE '81%';
    
17. 문제) 직업이 MANAGER이거나 SALESMAN인 사람의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE job IN ('MANAGER', 'SALESMAN');

18. 문제) 부서번호가 20, 30번을 제외한 모든 사람의 이름, 사원번호, 부서번호를 출력하라.
SELECT ename, empno, deptno FROM emp
    WHERE deptno NOT IN (20, 30);

19. 문제) 이름이 S로 시작하는 사원의 사원번호, 이름, 입사일, 부서번호를 출력하라.
SELECT empno, ename, hiredate, deptno FROM emp
    WHERE ename LIKE 'S%';

20. 문제) 입사일이 81년도인 사람의 모든 정보를 출력하라
SELECT * FROM emp
    WHERE hiredate LIKE '81%';

21. 문제) 이름 중 S자가 들어가 있는 사람만 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE ename LIKE '%S%';

22. 문제) 이름이 S로 시작하고 마지막 글자가 H인 사람의 모든 정보를 출력하라
(단, 이름은 전체 5자리이다)
SELECT * FROM emp
    WHERE ename LIKE 'S%H';
    
23. 문제) 이름이 첫 번째 문자는 관계없고, 두 번째 문자가 A인 사람의 정보를 출력하라.
SELECT * FROM emp
    WHERE ename LIKE '_A%';

24. 문제) 커미션이 NULL인 사람의 정보를 출력하라.
SELECT * FROM emp
    WHERE comm IS NULL;

25. 문제) 커미션이 NULL이 아닌 사람의 모든 정보를 출력하라.
SELECT * FROM emp
    WHERE comm IS NOT NULL;

26. 문제) 부서가 30번 부서이고 급여가 $1,500 이상인 사람의 이름, 부서 ,월급을 출력하라.
SELECT ename, deptno, sal FROM emp
    WHERE deptno = 30 AND sal >= 1500;

27. 문제) 이름의 첫 글자가 K로 시작하거나 부서번호가 30인 사람의 사원번호, 이름, 부서번호를 출력하라.
SELECT empno, ename, deptno FROM emp
    WHERE ename LIKE 'K%'
        OR deptno = 30;

28. 문제) 급여가 $1,500 이상이고 부서번호가 30번인 사원 중 직업이 MANAGER인 사람의 정보를 출력하라
SELECT * FROM emp
    WHERE sal >= 1500 AND deptno = 30 AND job = 'MANAGER';

29. 문제) 부서번호가 30인 사람 중 사원번호 SORT하라.
SELECT * FROM emp
    WHERE deptno = 30 ORDER BY empno ASC;

30. 문제) 급여가 많은 순(DESC)으로 SORT하라.
SELECT * FROM emp
    ORDER BY sal DESC;

31. 문제) 부서번호로 ASCENDING SORT한 후 급여가 많은 사람 순으로 출력하라.
SELECT * FROM emp
    ORDER BY deptno ASC, sal DESC;

32. 문제) 부서번호로 DESCENDING SORT하고, 이름 순으로 ASCENDING SORT 급여 순으로 DESCENDING SORT 하라.
SELECT * FROM emp
    ORDER BY deptno DESC,
        ename ASC, sal DESC;