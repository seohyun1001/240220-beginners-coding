-- 8장 조인

-- union
SELECT * FROM emp WHERE deptno = 10
UNION
SELECT * FROM emp WHERE deptno = 20;

-- 실습 8-1(p.216)
-- SQL-99 이전 방식 : 조인 조건 없이 실행 가능
SELECT * FROM emp, dept
ORDER BY empno, dept.deptno;

-- 실습 8-2(p.218)
-- 조인 조건 o
SELECT * FROM emp, dept
WHERE emp.deptno = dept.deptno
ORDER BY empno, dept.deptno;

-- SQL-99 방식 : 조인 조건 없이 실행 불가능
SELECT * FROM emp
INNER JOIN dept ON emp.deptno = dept.deptno
ORDER BY emp.empno, dept.deptno;



-- 실습 8-3(p.219)
-- 테이블의 별칭은 어디서든 사용 가능하다.
SELECT * FROM emp E
INNER JOIN dept D ON E.deptno = D.deptno
ORDER BY E.empno;

-- 등가 조인 = INNER JOIN, SIMPLE JOIN
-- : 특정 열이 정확히 일치하는 데이터를 사용하여 JOIN을 하는 방식
-- 대부분 외래키를 사용하여 JOIN을 실행하게 됨
-- 그러나 반드시 외래키일 필요는 없다
-- INNER 생략가능
SELECT * FROM emp E
    INNER JOIN dept D ON E.deptno = d.deptno;



-- 비등가 조인 : 등가 조인을 제외한 모든 조인 방식
-- 보통은 범위 데이터를 사용하여 조인하는 방식
SELECT * FROM emp E
INNER JOIN salgrade S ON E.sal BETWEEN S.losal AND S.hisal;



-- 자체 조인 : 같은 테이블을 두 번 사용하는 조인 방식
SELECT E.empno, E.ename, E.mgr,
    E2.empno AS MGR_EMPNO,
    E2.ename AS MGR_ENAME FROM emp E
INNER JOIN emp E2 ON E.mgr = E2.empno;

SELECT * FROM emp E
INNER JOIN dept D ON E.empno = D.deptno;
-- -> 같은 값이 없어서 데이터가 나오지 않음



-- 실습 8-9(p.229)
-- 왼쪽 외부 조인 
-- : 왼쪽 테이블을 기준으로 일치하지 않는 모든 데이터를 함께 출력하는 조인
SELECT E.empno, E.ename, E.mgr,
    E2.empno AS MGR_EMPNO,
    E2.ename AS MGR_ENAME
FROM emp E
LEFT OUTER JOIN emp E2 ON E.mgr = E2.empno
ORDER BY E.empno;

-- 실습 8-10(p.229)
-- 오른쪽 외부 조인
-- : 오른쪽 테이블을 기준으로 일치하지 않는 모든 데이터를 함께 출력하는 조인
SELECT E.empno, E.ename, E.mgr,
    E2.empno AS MGR_EMPNO,
    E2.ename AS MGR_ENAME FROM emp E
RIGHT OUTER JOIN emp E2 ON E.mgr = E2.empno
ORDER BY E.empno;

-- FULL OUTER JOIN : 양쪽의 일치하지 않는 데이터까지 출력하는 조인
SELECT E.empno, E.ename, E.mgr,
    E2.empno AS MGR_EMPNO,
    E2.ename AS MGR_ENAME FROM emp E
FULL OUTER JOIN emp E2 ON E.mgr = E2.empno
ORDER BY E.empno;



-- NATURAL JOIN : 특정 열의 조인 조건을 직접적으로 설정하지 않고
-- 이름과 자료형이 같은 열을 찾아서 자동으로 조인
-- 등가 조인에만 설정 가능
-- 등가 조인의 조건(DEPTNO)은 별칭을 쓸 수 없다
-- 실습 8-11(p.232)
SELECT E.empno, E.ename, E.job, E.mgr,
    E.hiredate, E.sal, E.comm, deptno,
    D.dname, D.loc FROM emp E
NATURAL JOIN dept D
ORDER BY deptno, E.empno;



-- JOIN ~ USING
-- 조인에 사용할 기준열을 설정하여 사용하는 조인
SELECT E.empno, E.ename, E.job, E.mgr,
    E.hiredate, E.sal, E.comm, deptno,
    D.dname, D.loc FROM emp E
JOIN dept D USING(deptno)
ORDER BY deptno, E.empno;



-- JOIN ~ ON
-- 가장 많이 쓰는 조인
-- 기준 열의 이름이 달라도 조인 가능, 자료형은 같아야 함
-- 등가/비등가/외부/자체 등 모든 조인을 사용 가능
-- 순서 : SELECT / FROM / JOIN ON / WHERE / ORDER BY
SELECT E.empno, E.ename, E.job, E.mgr,
    E.hiredate, E.sal, E.comm, D.deptno,
    D.dname, D.loc FROM emp E
JOIN dept D ON E.deptno = d.deptno
ORDER BY deptno, E.empno;



-- 등가 조인 <> 비등가 조인 : 조인의 조건이 = 인가, 아닌가
-- 내부 조인 <> 외부 조인 : 일치하지 않는 데이터를 출력하는가, 하지 않는가
-- 자체 조인 : 같은 테이블을 사용하는가



-- 여러 테이블을 조인하는 방식
SELECT * FROM emp E
    INNER JOIN dept D ON E.deptno = D.deptno
    INNER JOIN salgrade S ON E.sal BETWEEN S.losal AND S.hisal
    INNER JOIN emp M ON E.mgr = M.empno
WHERE E.sal >= 2000
ORDER BY E.deptno;



-- 연습 문제 
-- p.239~p.240
-- 1.
SELECT D.deptno, D.dname, E.empno, E.ename, E.sal
FROM dept D
    INNER JOIN emp E ON D.deptno = E.deptno
WHERE E.sal > 2000;

-- 2.
SELECT E.deptno, D.dname,
    TRUNC(AVG(E.sal)) AS AVG_SAL,
    MAX(E.sal) AS MAX_SAL,
    MIN(E.sal) AS MIN_SAL,
    COUNT(*) AS CNT
FROM emp E
    INNER JOIN dept D ON E.deptno = d.deptno
GROUP BY E.deptno, D.dname;

-- 3.
SELECT D.deptno, D.dname, E.empno, E.ename, E.job, E.sal
FROM dept D
    LEFT OUTER JOIN emp E ON D.deptno = E.deptno
    ORDER BY D.deptno;

-- 4.
SELECT D.deptno, D.dname, E.empno, E.ename, E.mgr,
        E.sal, E.deptno, S.losal, S.hisal, S.grade,
        E.mgr AS MGR_EMPNO,
        M.ename AS MGR_ENAME
FROM dept
    LEFT OUTER JOIN emp E ON D.deptno = E.deptno
    LEFT OUTER JOIN salgrade S ON E.sal BETWEEN S.losal AND S.hisal
    LEFT OUTER JOIN emp M ON E.mgr = M.empno
ORDER BY D.deptno, E.empno;



-- 연습문제
-- 그룹함수
-- 1. 각 부서별로 최대 급여를 구하세요.
SELECT deptno, MAX(sal) FROM emp
GROUP BY deptno
ORDER BY deptno;

-- 2. 각 직급(JOB)별로 최대 급여를 구하세요.
SELECT job, MAX(sal) FROM emp
GROUP BY job
ORDER BY job;

-- 3. 각 부서별로 평균 급여를 구하세요.
SELECT deptno, TRUNC(AVG(sal)) AS AVG_SAL FROM emp
GROUP BY deptno
ORDER BY deptno;

-- 4. 각 직급(JOB)별의 인원수를 구하세요.
SELECT job, COUNT(*) FROM emp
GROUP BY job
ORDER BY job;

-- 5. 각 부서별 인원수와 추가수당(COMM)을 받는 인원수를 구하세요.
SELECT deptno, COUNT(deptno) AS CNT1, COUNT(comm) AS CNT2 FROM emp
GROUP BY deptno, comm
ORDER BY deptno;

-- 6. 각 년도별로 입사한 인원수를 구하세요.
SELECT TO_CHAR(hiredate, 'YYYY') AS HIREDATE, COUNT(*) FROM emp
GROUP BY TO_CHAR(hiredate, 'YYYY')
ORDER BY hiredate;

-- 7. 부서별 평균 급여를 구하고 그 결과로 평균 급여가 2000 이상인 부서만 출력하세요.
SELECT deptno, TRUNC(AVG(sal)) AS AVG_SAL FROM emp
GROUP BY deptno
HAVING AVG(sal) >= 2000
ORDER BY deptno;

-- 8. 급여가 1000 이상인 사람들로 부서별 평균 급여를 구하고 그 결과로 평균급여가 2000이상인 부서만 출력하세요.
SELECT D.dname, TRUNC(AVG(E.sal)) AS AVG_SAL FROM dept D
INNER JOIN emp E ON D.deptno = E.deptno
WHERE E.sal >= 1000
GROUP BY D.dname
HAVING AVG(E.sal) > 2000
ORDER BY D.dname;


----------------------------------------------------------------------------------------------------------------
-- 조인
-- 1. 사원이름이 SCOTT인 사원의 사번(EMPNO), 이름(ENAME),  부서명(DNAME)을 출력하세요.
SELECT E.empno, E.ename, D.dname FROM emp E
    INNER JOIN dept D ON E.deptno = D.deptno
    WHERE UPPER(E.ename) = UPPER('SCott');

-- 2. 사원이름(ENAME)과 급여(SAL)와 급여등급(GRADE)을 출력하세요.
SELECT E.ename, E.sal, S.grade FROM emp E
    INNER JOIN salgrade S ON E.sal BETWEEN S.losal AND S.hisal
ORDER BY empno;

-- 3. 위 2번문제에서 부서명을 추가시켜 출력하세요.
SELECT D.dname, E.ename, E.sal, S.grade FROM emp E
    INNER JOIN salgrade S ON E.sal BETWEEN S.losal AND S.hisal
    INNER JOIN dept D ON E.deptno = D.deptno
ORDER BY D.deptno, E.empno;

-- 4. 사원이름과 매니저의 이름을 아래와 같은 형식으로 출력하세요.
--	"XXX"의 매니저는 "XXX" 입니다.
SELECT '"' || E.ename || '"의 매니저는 "' || E2.ename || '" 입니다.' AS MANAGER FROM emp E
INNER JOIN emp E2 ON E.mgr = E2.empno
ORDER BY E.deptno;

-- 5. 부서번호(DEPTNO)가 30번인 사원들의 이름(ENAME), 직급(JOB), 부서번호(DEPTNO), 부서위치(LOC)를 출력하세요.
SELECT E.ename, E.job, D.deptno, D.loc FROM emp E
INNER JOIN dept D ON D.deptno = E.deptno
WHERE E.deptno = 30
ORDER BY E.empno;

-- 6. 보너스(COMM)를 받은 사원의 이름(ENAME), 보너스(COMM), 부서명(DNAME), 부서위치(LOC)를 출력하세요.
SELECT E.ename, E.comm, D.dname, D.loc FROM emp E
INNER JOIN dept D ON D.deptno = E.deptno
WHERE comm IS NOT NULL AND comm > 0
ORDER BY E.empno;

-- 7. DALLAS에서 근무하는 사원들의 이름(ENAME), 직급(JOB), 부서번호(DEPTNO), 부서명(DNAME)을 출력하세요.
SELECT E.ename, E.job, E.deptno, D.dname FROM emp E
INNER JOIN dept D ON D.deptno = E.deptno
WHERE D.loc = 'DALLAS'
ORDER BY empno;

-- 8. 이름에 'A'가 들어가는 사원들의 이름(ENAME)과 부서명(DNAME)을 출력하세요.
SELECT E.ename, D.dname FROM emp E
INNER JOIN dept D ON D.deptno = E.deptno
WHERE UPPER(ename) LIKE UPPER('%A%');
